function [criterion, ms, significant, m1, m2,oracle, labels  ] = criteriaFunCubicKNN(trainX2,trainY2,testX,testY)
%CRITERIAFUN Summary of this function goes here
%   Detailed explanation goes here
LabelsY=categorical(trainY2(:,3));

% %Cubic KNN%
Mdl = fitcknn(...
    trainX2, ...
    LabelsY, ...
    'Distance', 'Minkowski', ...
    'NumNeighbors',9, ...
    'Exponent',3, ...
    'DistanceWeight', 'equal', ...
    'Standardize', true, ...
    'ClassNames', categorical({'0'; '1'}));

% Mdl = fitcknn(...
%     trainX2, ...
%     LabelsY, ...
%     'Distance', 'Hamming', ...
%     'NumNeighbors', 2, ...
%     'DistanceWeight', 'equal', ...
%     'Standardize', true, ...
%     'ClassNames', categorical({'0'; '1'}));

%-------------------------------------------------%
% %Optimize
% Mdl = fitcknn(...
%     trainX2, ...
%     LabelsY, ...
%     'OptimizeHyperparameters','all',...
%     'HyperparameterOptimizationOptions',...
%     struct('AcquisitionFunctionName','expected-improvement-plus','Verbose',1,'UseParallel',1,'ShowPlots',0,'KFold',10), ...
%     'ClassNames', categorical({'0'; '1'}));

%------------------------------------------------%

[pred,ci] = predict(Mdl,testX);
if ~iscategorical(pred) 
    error('Predictions must be categorical')
end
labels=pred;
 [ms, significant, m1, m2, oracle ] = AverageNDCG(testY,pred);


criterion=1-ms;
end

