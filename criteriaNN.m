function [criterion, ms, significant, m1, m2,oracle, labels  ] = criteriaNN(trainX2,trainY2,testX,testY)

% % % [Y,Xf,Af] = myNeuralNetworkFunction(testX);
% % % y=categorical(round(Y));
% % % labels=y;
% % % [ms, significant, m1, m2, oracle ] = AverageNDCG(testY,y);
% % % criterion=1-ms;
% % % return
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 28-May-2020 17:02:50
%
% This script assumes these variables are defined:
%
%   Xtrain - input data.
%   YT - target data.
LabelsY=trainY2(:,3);
x = trainX2';
t = LabelsY';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize, trainFcn);
net.trainParam.showWindow=0;
%net.trainParam.goal=1e-6;

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.performFcn = 'mse';
% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(testX');
y=categorical(round(y));
labels=y;
[ms, significant, m1, m2, oracle ] = AverageNDCG(testY,y);
criterion=1-ms;
end

